#!/bin/bash

# Generate a token, if one doesn't exists
TOKEN_FILE=~/.postcommit-github-access-token
TOKEN=$(cat $TOKEN_FILE 2> /dev/null)

if [ "$TOKEN" = "" ]; then
  echo -n "github username: "
  read GITHUB_USERNAME
  curl -u $GITHUB_USERNAME -d "{\"scopes\": [\"repo\", \"public_repo\"], \"note\": \"post-commit-pr-$RANDOM\"}" \
    https://api.github.com/authorizations  | grep '"token":' | sed 's/.*: "//' | sed 's/",$//' > $TOKEN_FILE
fi

TOKEN=$(cat $TOKEN_FILE 2> /dev/null)
if [ "$TOKEN" = "" ]; then
  echo "Couldn't get github access token, something went wrong"
  exit
fi

# Get remote branch for current HEAD, and HEAD~1
function get-branch() {
  CURRENT_REF=$(git show -s --format=%H $1)
  git for-each-ref 'refs/remotes/origin/' \
    | grep -v 'HEAD' | grep "$CURRENT_REF" | cut -f2 \
    | sed 's@refs/remotes/origin/@@' | head -n 1
}

function mk-branch-name() {
  git show -s --format=%s $1 | sed 's/[[:space:]]/-/g' | tr 'A-Z' 'a-z'
}

HEAD=$(get-branch HEAD)
BASE=$(get-branch HEAD~1)

# If a remote for head doesn't exists, create one
if [ "$HEAD" = "" ]; then
  HEAD=$USER/$(mk-branch-name HEAD)
fi

# If a remote for base doesn't exists, create it
if [ "$BASE" = "" ]; then
  BASE=$USER/$(mk-branch-name HEAD~1)
  git push -f origin HEAD:refs/heads/$BASE > /dev/null
fi

# force push head
git push -f origin HEAD:refs/heads/$HEAD > /dev/null

# Crazy '//' syntax is bash ANSI-C quoting http://stackoverflow.com/a/7218905
TITLE=$(git show -s --format=%s)
BODY=${MSG//$'\n'/\\n}
ENDPOINT=$(git config --get remote.origin.url | sed 's/.*://' | sed 's/.git$//')

# Create a new PR, if one already exists for the above branch, this will simply fail
# which is fine for us
curl -s -S -X POST -H "Authorization: token $TOKEN" \
    -H 'Content-Type: application/json' \
    -d "{\"title\": \"$TITLE\", 
         \"head\": \"$HEAD\", 
         \"base\": \"$BASE\", 
         \"body\": \"$BODY\"}" \
    https://api.github.com/repos/$ENDPOINT/pulls > /dev/null
